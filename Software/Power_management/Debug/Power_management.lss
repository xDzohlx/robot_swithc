
Power_management.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00802800  00802800  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003480  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002366  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000645  00000000  00000000  00005d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000636c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a46  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016b  00000000  00000000  00007e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00007fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_12>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_22>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a9 30       	cpi	r26, 0x09	; 9
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 49 01 	call	0x292	; 0x292 <main>
  b0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <offsetsignals>:
bool apagar = false;


void offsetsignals(){//etapa de autocalibracion por promedio, pequeño filtro digital
	//_delay_ms(1500);
	for (int i = 0;i<8;i++){//adquisición de señales, 8 valores en total
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	16 c0       	rjmp	.+44     	; 0xea <offsetsignals+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <offsetsignals+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <offsetsignals+0x10>
  c8:	00 00       	nop
		_delay_ms(50);
		ADC_boton_calibracion += ADC_boton;
  ca:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <ADC_boton>
  ce:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <ADC_boton+0x1>
  d2:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <ADC_boton_calibracion>
  d6:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <ADC_boton_calibracion+0x1>
  da:	84 0f       	add	r24, r20
  dc:	95 1f       	adc	r25, r21
  de:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <ADC_boton_calibracion>
  e2:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <ADC_boton_calibracion+0x1>
bool apagar = false;


void offsetsignals(){//etapa de autocalibracion por promedio, pequeño filtro digital
	//_delay_ms(1500);
	for (int i = 0;i<8;i++){//adquisición de señales, 8 valores en total
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	28 30       	cpi	r18, 0x08	; 8
  ec:	31 05       	cpc	r19, r1
  ee:	3c f3       	brlt	.-50     	; 0xbe <offsetsignals+0x6>
		_delay_ms(50);
		ADC_boton_calibracion += ADC_boton;
	}
	ADC_boton_calibracion = (ADC_boton_calibracion>>3);
  f0:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <ADC_boton_calibracion>
  f4:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <ADC_boton_calibracion+0x1>
  f8:	96 95       	lsr	r25
  fa:	87 95       	ror	r24
  fc:	96 95       	lsr	r25
  fe:	87 95       	ror	r24
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
 104:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <ADC_boton_calibracion>
 108:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <ADC_boton_calibracion+0x1>
 10c:	08 95       	ret

0000010e <setup>:
	}
void setup(void)
{

	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLB), (CLKCTRL_PDIV_2X_gc|CLKCTRL_PEN_bm));//Maxima frecuencia de lectura de pwm en señal de reloj per
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <ccp_write_io>
	
	//pasos_de_encendido secuencia;
	
	secuencia = Encendido_espera;
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <secuencia>
	
	PORTF.DIRSET = PIN4_bm;//VCC enable PIN
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7f44a1>
	
	PORTA.DIRSET = PIN2_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;//LEDS Y HSS
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f4 e0       	ldi	r31, 0x04	; 4
 128:	24 ef       	ldi	r18, 0xF4	; 244
 12a:	21 83       	std	Z+1, r18	; 0x01
	
	PORTA.OUTCLR = PIN5_bm|PIN6_bm|PIN7_bm;//otros leds
 12c:	20 ee       	ldi	r18, 0xE0	; 224
 12e:	26 83       	std	Z+6, r18	; 0x06
	
	PORTA.OUTCLR = PIN4_bm;//HSS diag off
 130:	86 83       	std	Z+6, r24	; 0x06
	
	PORTC.DIRSET = PIN2_bm;//LED 4
 132:	e0 e4       	ldi	r30, 0x40	; 64
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.OUTCLR = PIN2_bm;//LED 4
 13a:	86 83       	std	Z+6, r24	; 0x06
	
	//PORTA.OUTSET = PIN2_bm;//HSS en
	
	//Timer
	
	TCB0.CTRLA |= TCB_ENABLE_bm;
 13c:	e0 e8       	ldi	r30, 0x80	; 128
 13e:	fa e0       	ldi	r31, 0x0A	; 10
 140:	80 81       	ld	r24, Z
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
	TCB0.CCMP = 0xFA0;//Valor top 4000 interrupcion cada milisegundo
 146:	20 ea       	ldi	r18, 0xA0	; 160
 148:	3f e0       	ldi	r19, 0x0F	; 15
 14a:	24 87       	std	Z+12, r18	; 0x0c
 14c:	35 87       	std	Z+13, r19	; 0x0d
	TCB0.INTCTRL |= TCB_CAPT_bm;//habilita la interrupcion
 14e:	85 81       	ldd	r24, Z+5	; 0x05
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 83       	std	Z+5, r24	; 0x05
	timer_1 = 0x00;
 154:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <timer_1>
 158:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <timer_1+0x1>
	
	//ADC
	VREF.CTRLA = VREF_ADC0REFSEL_4V34_gc;// Se selecciona la referencia a 2.5 volts par mejorar la resolucion de los sensores
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
	//ADC con referencia interna
	ADC0.CTRLA |= ADC_RESSEL_bm|ADC_FREERUN_bm;//RESOLUCION Y MODO DE MUESTRAS CONSECUTIVAS
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f6 e0       	ldi	r31, 0x06	; 6
 166:	80 81       	ld	r24, Z
 168:	86 60       	ori	r24, 0x06	; 6
 16a:	80 83       	st	Z, r24
	ADC0.CTRLB |= ADC_SAMPNUM_ACC32_gc;//MUESTRAS
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	85 60       	ori	r24, 0x05	; 5
 170:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC |= ADC_REFSEL_INTREF_gc|ADC_PRESC_DIV8_gc;//VOLTAJE DE REFERENCIA
 172:	82 81       	ldd	r24, Z+2	; 0x02
 174:	82 60       	ori	r24, 0x02	; 2
 176:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLD |= ADC_INITDLY_DLY16_gc;//CONFIGURACION DEL RELOJ DEL ADC
 178:	83 81       	ldd	r24, Z+3	; 0x03
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	83 83       	std	Z+3, r24	; 0x03
	//Canales de 0 al 7 despues a partir del 12 o 0x0C
	ADC0.MUXPOS = 0x01;//SELECCION DE CANAL DE ADC PD1
 17e:	96 83       	std	Z+6, r25	; 0x06
	ADC0.INTCTRL |= ADC_RESRDY_bm;//Habilitar interrupciones de resultado completo
 180:	82 85       	ldd	r24, Z+10	; 0x0a
 182:	81 60       	ori	r24, 0x01	; 1
 184:	82 87       	std	Z+10, r24	; 0x0a
	//ADC0.INTCTRL |= ADC_WCMP_bm;
	ADC0.CTRLA |= ADC_ENABLE_bm;//ENCENDIDO DE ADC
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
	ADC0.COMMAND |= ADC_STCONV_bm;//INICIO DE MUESTRAS
 18c:	80 85       	ldd	r24, Z+8	; 0x08
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 87       	std	Z+8, r24	; 0x08
	
	CPUINT.LVL0PRI = ADC0_RESRDY_vect_num;
 192:	86 e1       	ldi	r24, 0x16	; 22
 194:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__TEXT_REGION_LENGTH__+0x7f4112>
	
	
	//timer TCA
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_CLKSEL_DIV2_gc;//fuente de reloj,
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	fa e0       	ldi	r31, 0x0A	; 10
 19c:	80 81       	ld	r24, Z
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	80 83       	st	Z, r24
	TCA0.SINGLE.PER = 0x030;//Selección de resolucion de pwm y periodo total de pwm
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	86 a3       	std	Z+38, r24	; 0x26
 1a8:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_CMP2_bm|TCA_SINGLE_WGMODE_SINGLESLOPE_gc;//Habilitar comparador y seleccion de modo de de generacion de onda con modo de rampa sensilla TCA_SINGLE_CMP1EN_bm|
 1aa:	81 81       	ldd	r24, Z+1	; 0x01
 1ac:	83 64       	ori	r24, 0x43	; 67
 1ae:	81 83       	std	Z+1, r24	; 0x01
	//TCA0.SINGLE.CMP1 = 0x000;//registro de 16 bits para comparacion y pediodo de pwm
	TCA0.SINGLE.CMP2 = 0x018;
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	84 a7       	std	Z+44, r24	; 0x2c
 1b6:	95 a7       	std	Z+45, r25	; 0x2d

			//TCB2.CTRLA |= TCB_ENABLE_bm|TCB_CLKSEL_CLKDIV2_gc;
			//TCB2.CCMP = 0xFFFE;//Valor top 4000 interrupcion cada 10 milisegundos
			//TCB2.INTCTRL |= TCB_CAPT_bm;//habilita la interrupcion

	sei();
 1b8:	78 94       	sei
 1ba:	08 95       	ret

000001bc <__vector_22>:
}
ISR(ADC0_RESRDY_vect){//solo 4 sensores para empezar
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
	//Canales de 0 al 7 despues a partir del 12 hasta sensor 14

	ADC_boton = ADC0.RES>>5;
 1ca:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
 1ce:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	92 95       	swap	r25
 1d8:	82 95       	swap	r24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	89 27       	eor	r24, r25
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	89 27       	eor	r24, r25
 1e2:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <ADC_boton>
 1e6:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <ADC_boton+0x1>
}
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_12>:

ISR(TCB0_INT_vect){//contador de milisegundos, para generador de trayectorias
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	timer_1++;
 20c:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <timer_1>
 210:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <timer_1+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <timer_1>
 21a:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <timer_1+0x1>
//	timer_2++;

	if (empezar_secuencia)
 21e:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <empezar_secuencia>
 222:	88 23       	and	r24, r24
 224:	b1 f0       	breq	.+44     	; 0x252 <__vector_12+0x5a>
	{
		if ((timer_1>1250)){//&&()&&(ADC_boton>0xbb)
 226:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <timer_1>
 22a:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <timer_1+0x1>
 22e:	83 3e       	cpi	r24, 0xE3	; 227
 230:	94 40       	sbci	r25, 0x04	; 4
 232:	08 f1       	brcs	.+66     	; 0x276 <__vector_12+0x7e>
			secuencia++;
 234:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <secuencia>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <secuencia>
			timer_1 = 0x00;
 23e:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <timer_1>
 242:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <timer_1+0x1>
			if (secuencia > led_3){
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	b0 f0       	brcs	.+44     	; 0x276 <__vector_12+0x7e>
				secuencia = led_3;
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <secuencia>
 250:	12 c0       	rjmp	.+36     	; 0x276 <__vector_12+0x7e>
			}
		}
	}else{

		if ((timer_1>1250)){//&&(ADC_boton>0xbb)
 252:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <timer_1>
 256:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <timer_1+0x1>
 25a:	83 3e       	cpi	r24, 0xE3	; 227
 25c:	94 40       	sbci	r25, 0x04	; 4
 25e:	58 f0       	brcs	.+22     	; 0x276 <__vector_12+0x7e>
			if (secuencia!=Apagado)
 260:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <secuencia>
 264:	88 23       	and	r24, r24
 266:	19 f0       	breq	.+6      	; 0x26e <__vector_12+0x76>
			{
				secuencia--;
 268:	81 50       	subi	r24, 0x01	; 1
 26a:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <secuencia>
			}
			
			timer_1 = 0x00;
 26e:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <timer_1>
 272:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <timer_1+0x1>
		}
	}
	
	TCB0.INTFLAGS &= ~TCB_CAPT_bp;
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	fa e0       	ldi	r31, 0x0A	; 10
 27a:	86 81       	ldd	r24, Z+6	; 0x06
 27c:	86 83       	std	Z+6, r24	; 0x06
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <main>:
	

int main(void)
{
    setup();
 292:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
	
	PORTC.OUTSET = PIN2_bm;
 296:	c0 e4       	ldi	r28, 0x40	; 64
 298:	d4 e0       	ldi	r29, 0x04	; 4
 29a:	14 e0       	ldi	r17, 0x04	; 4
 29c:	1d 83       	std	Y+5, r17	; 0x05
	offsetsignals();
 29e:	0e 94 5c 00 	call	0xb8	; 0xb8 <offsetsignals>
 2a2:	2f ed       	ldi	r18, 0xDF	; 223
 2a4:	83 e9       	ldi	r24, 0x93	; 147
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x16>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x20>
 2b2:	00 00       	nop
	_delay_ms(1500);
	PORTF.OUTSET = PIN4_bm;//VCC enable
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f44a5>
	
	PORTC.OUTCLR = PIN2_bm;
 2ba:	1e 83       	std	Y+6, r17	; 0x06
    while (1) 
    {

	if ((ADC_boton>boton_adc))//Se requiere detectar cambios en la señal el voltaje de ADC boton no es estatico
 2bc:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <ADC_boton>
 2c0:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <ADC_boton+0x1>
 2c4:	81 3d       	cpi	r24, 0xD1	; 209
 2c6:	91 05       	cpc	r25, r1
 2c8:	50 f0       	brcs	.+20     	; 0x2de <main+0x4c>
	{
		empezar_secuencia=true;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <empezar_secuencia>
		if (apagar)
 2d0:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2d4:	88 23       	and	r24, r24
 2d6:	81 f0       	breq	.+32     	; 0x2f8 <main+0x66>
		{
			empezar_secuencia= false;
 2d8:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <empezar_secuencia>
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <main+0x66>
		}
	}else{
		
		if ((secuencia!=led_3))
 2de:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <secuencia>
 2e2:	84 30       	cpi	r24, 0x04	; 4
 2e4:	11 f0       	breq	.+4      	; 0x2ea <main+0x58>
		{
			empezar_secuencia= false;
 2e6:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <empezar_secuencia>
		}
		if (apagar)
 2ea:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2ee:	88 23       	and	r24, r24
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <main+0x66>
		{
			empezar_secuencia = true;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <empezar_secuencia>
		}
		
	}
	
	switch(secuencia){//maquina de estados para encender el HSS
 2f8:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <secuencia>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	09 f4       	brne	.+2      	; 0x302 <main+0x70>
 300:	3c c0       	rjmp	.+120    	; 0x37a <main+0xe8>
 302:	28 f4       	brcc	.+10     	; 0x30e <main+0x7c>
 304:	88 23       	and	r24, r24
 306:	51 f0       	breq	.+20     	; 0x31c <main+0x8a>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	f1 f0       	breq	.+60     	; 0x348 <main+0xb6>
 30c:	d7 cf       	rjmp	.-82     	; 0x2bc <main+0x2a>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x82>
 312:	3f c0       	rjmp	.+126    	; 0x392 <main+0x100>
 314:	84 30       	cpi	r24, 0x04	; 4
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x88>
 318:	48 c0       	rjmp	.+144    	; 0x3aa <main+0x118>
 31a:	d0 cf       	rjmp	.-96     	; 0x2bc <main+0x2a>
		case Apagado:
			PORTA.OUTCLR = PIN2_bm;//HSS off
 31c:	e0 e0       	ldi	r30, 0x00	; 0
 31e:	f4 e0       	ldi	r31, 0x04	; 4
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	86 83       	std	Z+6, r24	; 0x06
			PORTF.OUTCLR = PIN4_bm;//VCC off power off
 324:	90 e1       	ldi	r25, 0x10	; 16
 326:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f44a6>
			PORTC.OUTCLR = PIN2_bm;//lED 1 ON
 32a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			PORTA.OUTCLR = PIN7_bm;//LED 2 OFF
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	86 83       	std	Z+6, r24	; 0x06
			PORTA.OUTCLR = PIN6_bm;//LED 3 OFF
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	86 83       	std	Z+6, r24	; 0x06
			PORTA.OUTCLR = PIN5_bm;//LED 4 OFF
 336:	80 e2       	ldi	r24, 0x20	; 32
 338:	86 83       	std	Z+6, r24	; 0x06
			
			TCA0.SINGLE.CMP2 = 0x00;
 33a:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
 33e:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
			
			while (1)
			{
				cli();
 342:	f8 94       	cli
				asm("NOP");
 344:	00 00       	nop
 346:	fd cf       	rjmp	.-6      	; 0x342 <main+0xb0>
			}
		break;
		case Encendido_espera:
			PORTC.OUTSET = PIN2_bm;//lED 1 ON
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			PORTA.OUTCLR = PIN7_bm;//LED 2 OFF
 34e:	e0 e0       	ldi	r30, 0x00	; 0
 350:	f4 e0       	ldi	r31, 0x04	; 4
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	86 83       	std	Z+6, r24	; 0x06
			PORTA.OUTCLR = PIN6_bm;//LED 3 OFF
 356:	80 e4       	ldi	r24, 0x40	; 64
 358:	86 83       	std	Z+6, r24	; 0x06
			PORTA.OUTCLR = PIN5_bm;//LED 4 OFF
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	86 83       	std	Z+6, r24	; 0x06
			if (!apagar)
 35e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 362:	81 11       	cpse	r24, r1
 364:	ab cf       	rjmp	.-170    	; 0x2bc <main+0x2a>
			{
				TCA0.SINGLE.CMP2 = 0x018;//Para encendido suave, carga de capacitores
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	fa e0       	ldi	r31, 0x0A	; 10
 36a:	88 e1       	ldi	r24, 0x18	; 24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	84 a7       	std	Z+44, r24	; 0x2c
 370:	95 a7       	std	Z+45, r25	; 0x2d
				TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;//Habilitar pwm
 372:	80 81       	ld	r24, Z
 374:	81 60       	ori	r24, 0x01	; 1
 376:	80 83       	st	Z, r24
 378:	a1 cf       	rjmp	.-190    	; 0x2bc <main+0x2a>
			}
		//_delay_ms(7500);
		break;
		case led_1:
			PORTC.OUTSET = PIN2_bm;//lED 1 ON
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			PORTA.OUTSET = PIN7_bm;//LED 2 ON
 380:	e0 e0       	ldi	r30, 0x00	; 0
 382:	f4 e0       	ldi	r31, 0x04	; 4
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	85 83       	std	Z+5, r24	; 0x05
			PORTA.OUTCLR = PIN6_bm;//LED 3 OFF
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	86 83       	std	Z+6, r24	; 0x06
			PORTA.OUTCLR = PIN5_bm;//LED 4 OFF
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	86 83       	std	Z+6, r24	; 0x06
		//_delay_ms(7500);
		break;
 390:	95 cf       	rjmp	.-214    	; 0x2bc <main+0x2a>
		case led_2:
			PORTC.OUTSET = PIN2_bm;//lED 1 ON
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			PORTA.OUTSET = PIN7_bm;//LED 2 ON
 398:	e0 e0       	ldi	r30, 0x00	; 0
 39a:	f4 e0       	ldi	r31, 0x04	; 4
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	85 83       	std	Z+5, r24	; 0x05
			PORTA.OUTSET = PIN6_bm;//LED 3 ON
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	85 83       	std	Z+5, r24	; 0x05
			PORTA.OUTCLR = PIN5_bm;//LED 4 OFF
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	86 83       	std	Z+6, r24	; 0x06
		//_delay_ms(7500);
		break;
 3a8:	89 cf       	rjmp	.-238    	; 0x2bc <main+0x2a>
		case led_3:
			TCA0.SINGLE.CMP2 = 0x030;
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
 3b2:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
			PORTA.OUTSET = PIN6_bm;
 3b6:	80 e4       	ldi	r24, 0x40	; 64
 3b8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
			if ((ADC_boton>boton_adc))
 3bc:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <ADC_boton>
 3c0:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <ADC_boton+0x1>
 3c4:	81 3d       	cpi	r24, 0xD1	; 209
 3c6:	91 05       	cpc	r25, r1
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <main+0x13e>
			{
				}else{
				apagar = true;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
				}		
			PORTC.OUTSET = PIN2_bm;//lED 1 ON
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			PORTA.OUTSET = PIN7_bm;//LED 2 ON
 3d6:	e0 e0       	ldi	r30, 0x00	; 0
 3d8:	f4 e0       	ldi	r31, 0x04	; 4
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	85 83       	std	Z+5, r24	; 0x05
			PORTA.OUTSET = PIN6_bm;//LED 3 ON
 3de:	80 e4       	ldi	r24, 0x40	; 64
 3e0:	85 83       	std	Z+5, r24	; 0x05
			PORTA.OUTSET = PIN5_bm;//LED 4 ON
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	85 83       	std	Z+5, r24	; 0x05
		break;
 3e6:	6a cf       	rjmp	.-300    	; 0x2bc <main+0x2a>

000003e8 <ccp_write_io>:
 3e8:	dc 01       	movw	r26, r24
 3ea:	28 ed       	ldi	r18, 0xD8	; 216
 3ec:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
 3f0:	6c 93       	st	X, r22
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
